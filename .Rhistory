category_order
rm(config)
tar_make(config)
tar_make(config)
tar_load(config)
config$gas_order
category_order <- config$gas_order
processed_dfs <- list()
years_proj <- as.character(config$table[config$table > config$base_year])
years_hist <- as.character(config$table[config$table <= config$base_year])
for(value in category_order) {
subset_df <- gas_dataset %>% filter(gas == value)
ghgi_subset <-
subset_df %>% filter(proj_name == 'ghgi') %>% filter(year <= config$base_year)
proj_subset <-
subset_df %>% filter(!proj_name == 'ghgi') %>% filter(year > config$base_year)
ghgi_subset_wide <- ghgi_subset %>% pivot_wider(names_from = year,
values_from = mmtco2e) %>% ungroup() %>% select(years_hist)
proj_subset_wide <-
proj_subset %>% pivot_wider(names_from = year,
values_from = mmtco2e)
ghgi_subset_wide_rep <-
do.call('rbind', replicate(nrow(proj_subset_wide), ghgi_subset_wide, simplify =
FALSE))
value_df <- cbind(proj_subset_wide, ghgi_subset_wide_rep) %>% select(proj_name, gas,   as.character(config$table))
processed_dfs[[value]] <- value_df
}
breakout_df <- bind_rows(processed_dfs)
View(breakout_df)
gas_breakout <- breakout_df
View(gas_breakout)
summarized_df <- gas_breakout %>% group_by(proj_name) %>%
summarise(across(where(is.numeric), sum, na.rm=TRUE),.groups='drop') %>%
mutate(source = 'Total Gross Emissions') %>%
select(proj_name,source, everything())
View(summarized_df)
View(lulucf_sink_breakout)
cols_gas_breakout <- colnames(gas_breakout)
missing_cols <- setdiff(cols_gas_breakout, colnames(lulucf_sink_breakout))
lulucf_sink_breakout[missing_cols] <- NA
lulucf_sink_breakout <- lulucf_sink_breakout[, cols_gas_breakout]
combined_df <- bind_rows(gas_breakout, lulucf_sink_breakout)
tne_df <- gen_total_gross_emissions(combined_df)%>%
mutate(source = 'Total Net Emissions') %>%
select(proj_name,source, everything())
gen_total_gross_emissions <- function(gas_breakout){
summarized_df <- gas_breakout %>% group_by(proj_name) %>%
summarise(across(where(is.numeric), sum, na.rm=TRUE),.groups='drop') %>%
mutate(source = 'Total Gross Emissions') %>%
select(proj_name,source, everything())
}
View(lulucf_sink_breakout)
cols_gas_breakout <- colnames(gas_breakout)
# Add NA columns missing in LULUCF that are present in projections
missing_cols <- setdiff(cols_gas_breakout, colnames(lulucf_sink_breakout))
lulucf_sink_breakout[missing_cols] <- NA
lulucf_sink_breakout <- lulucf_sink_breakout[, cols_gas_breakout]
combined_df <- bind_rows(gas_breakout, lulucf_sink_breakout)
tne_df <- combined_df %>%
gen_total_gross_emissions() %>%
mutate(source = 'Total Net Emissions') %>%
select(proj_name,source, everything())
View(tne_df)
View(combined_df)
View(lulucf_sink_breakout)
lulucf_sink_df <- projections_all_sm %>% ungroup() %>%
select(proj_name,gas,year,sum) %>%
filter(gas=='LULUCF Sink') %>%
filter(year %in% config$table)
years_lulucf_sink <- as.character(unique(lulucf_sink_df$year))
lulucf_sink_hist <- lulucf_sink_df %>% filter(year <= config$base_year)
years_lulucf_sink_hist <- as.character(unique(lulucf_sink_hist$year))
ghgi_subset <-
lulucf_sink_df %>% filter(proj_name == 'ghgi') %>% filter(year <= config$base_year)
proj_subset <-
lulucf_sink_df %>% filter(!proj_name == 'ghgi') %>% filter(year > config$base_year)
ghgi_subset_wide <- ghgi_subset %>% pivot_wider(names_from = year,
values_from = sum) %>% ungroup() %>% select(all_of(years_lulucf_sink_hist))
proj_subset_wide <-
proj_subset %>% pivot_wider(names_from = year,
values_from = sum)
ghgi_subset_wide_rep <-
do.call('rbind', replicate(nrow(proj_subset_wide), ghgi_subset_wide, simplify = FALSE))
value_df <- cbind(proj_subset_wide, ghgi_subset_wide_rep) %>%
select(proj_name, gas, all_of(years_lulucf_sink_hist))
View(value_df)
lulucf_sink_breakout <- cbind(proj_subset_wide, ghgi_subset_wide_rep) %>%
select(proj_name, gas, all_of(years_lulucf_sink_hist))
cols_gas_breakout <- colnames(gas_breakout)
# Add NA columns missing in LULUCF that are present in projections
missing_cols <- setdiff(cols_gas_breakout, colnames(lulucf_sink_breakout))
lulucf_sink_breakout[missing_cols] <- NA
lulucf_sink_breakout <- lulucf_sink_breakout[, cols_gas_breakout]
View(lulucf_sink_breakout)
tar_make()
tar_make()
tar_invalidate(btr_tables_figs)
tar_make()
View(projections_all)
unique(projections_all$usproj_sector)
View(projections_all %>% filter(usproj_sector == 'LULUCF'))
View(projections_ghgi %>% filter(usproj_sector == 'LULUCF'))
unique(projections_ghgi$gas)
unique(projections_ghgi$usproj_category)
unique(projections_ghgi$usproj_sector)
lulucf_sink_df <- projections_all_sm %>% ungroup() %>%
select(proj_name,gas,year,sum) %>%
filter(gas=='LULUCF Sink') %>%
filter(year %in% config$table)
lulucf_sink_df <- projections_all_sm %>%
#ungroup() %>%
select(proj_name,gas,year,sum) %>%
filter(gas=='LULUCF Sink') %>%
filter(year %in% config$table)
years_lulucf_sink <- as.character(unique(lulucf_sink_df$year))
lulucf_sink_hist <- lulucf_sink_df %>% filter(year <= config$base_year)
years_lulucf_sink_hist <- as.character(unique(lulucf_sink_hist$year))
ghgi_subset <-
lulucf_sink_df %>%
filter(proj_name == 'ghgi') %>%
filter(year <= config$base_year)
proj_subset <-
lulucf_sink_df %>%
filter(!proj_name == 'ghgi') %>%
filter(year > config$base_year)
View(ghgi_subset)
ghgi_subset_wide <- ghgi_subset %>%
pivot_wider(names_from = year, values_from = sum) %>%
select(all_of(years_lulucf_sink_hist))
View(proj_subset)
ghgi_subset_wide_rep <-
do.call('rbind', replicate(nrow(proj_subset_wide), ghgi_subset_wide, simplify = FALSE))
proj_subset_wide <- proj_subset %>%
pivot_wider(names_from = year, values_from = sum)
ghgi_subset_wide_rep <-
do.call('rbind', replicate(nrow(proj_subset_wide), ghgi_subset_wide, simplify = FALSE))
View(ghgi_subset_wide_rep)
lulucf_sink_breakout <- cbind(proj_subset_wide, ghgi_subset_wide_rep) %>%
select(proj_name, gas, all_of(years_lulucf_sink_hist))
View(lulucf_sink_breakout)
View(proj_subset_wide)
years_lulucf_sink
lulucf_sink_df <- projections_all_sm %>%
#ungroup() %>%
select(proj_name,gas,year,sum) %>%
filter(gas=='LULUCF Sink') %>%
filter(year %in% config$table)
years_lulucf_sink <- as.character(unique(lulucf_sink_df$year))
lulucf_sink_hist <- lulucf_sink_df %>% filter(year <= config$base_year)
years_lulucf_sink_hist <- as.character(unique(lulucf_sink_hist$year))
ghgi_subset <-
lulucf_sink_df %>%
filter(proj_name == 'ghgi') %>%
filter(year <= config$base_year)
proj_subset <-
lulucf_sink_df %>%
filter(!proj_name == 'ghgi') %>%
filter(year > config$base_year)
ghgi_subset_wide <- ghgi_subset %>%
pivot_wider(names_from = year, values_from = sum) %>%
select(all_of(years_lulucf_sink_hist))
proj_subset_wide <- proj_subset %>%
pivot_wider(names_from = year, values_from = sum)
ghgi_subset_wide_rep <-
do.call('rbind', replicate(nrow(proj_subset_wide), ghgi_subset_wide, simplify = FALSE))
lulucf_sink_breakout <- cbind(proj_subset_wide, ghgi_subset_wide_rep) %>%
select(proj_name, gas, all_of(years_lulucf_sink))
View(lulucf_sink_breakout)
tar_make(lulucf_sink_breakout)
View(gas_breakout)
View(lulucf_sink_breakout)
cols_gas_breakout <- colnames(gas_breakout)
# Add NA columns missing in LULUCF that are present in projections
missing_cols <- setdiff(cols_gas_breakout, colnames(lulucf_sink_breakout))
lulucf_sink_breakout[missing_cols] <- NA
lulucf_sink_breakout <- lulucf_sink_breakout[, cols_gas_breakout]
combined_df <- bind_rows(gas_breakout, lulucf_sink_breakout)
View(combined_df)
tne_df <- combined_df %>%
gen_total_gross_emissions() %>%
mutate(source = 'Total Net Emissions') %>%
select(proj_name,source, everything())
gen_total_gross_emissions <- function(gas_breakout){
summarized_df <- gas_breakout %>% group_by(proj_name) %>%
summarise(across(where(is.numeric), sum, na.rm=TRUE),.groups='drop') %>%
mutate(source = 'Total Gross Emissions') %>%
select(proj_name,source, everything())
}
tne_df <- combined_df %>%
gen_total_gross_emissions() %>%
mutate(source = 'Total Net Emissions') %>%
select(proj_name,source, everything())
View(tne_df)
View(tne_df)
tne_df_new
tne_df_new <- tne_df
rm(tne_df)
View(total_net_emissions)
View(tne_df_new)
tar_invalidate(btr_tables_figs)
tar_make(btr_tables_figs)
tar_invalidate(everything())
tar_make()
View(check_nrg_excl_trn_acct)
View(usproj_data_long_all)
View(usproj_data_long_all %>% filter(usproj_sector =='LULUCF'))
tar_invalidate(data_long_clean)
tar_make(data_long_Clean)
tar_make(data_long_clean)
?complete
# Load packages required to define the pipeline:
library(targets)
library(tarchetypes)
tar_invalidate(data_long_clean)
tar_make(data_long_clean)
gc()
tar_invalidate(data_long_clean)
tar_make(data_long_clean)
# Load packages required to define the pipeline:
library(targets)
library(tarchetypes)
source("packages.R")
View(data_long_clean)
unique(data_long_clean$datasrc)
View(annual_growth_rate_var)
View(cumulative_var)
# Load packages required to define the pipeline:
library(targets)
library(tarchetypes)
source("packages.R")
values = figmap_values("figure-maps")
tar_source()
values = figmap_values("figure-maps")
View(values)
# Load packages required to define the pipeline:
library(targets)
library(tarchetypes)
source("packages.R")
values = figmap_values("figure-maps")
tar_source()
values = figmap_values("figure-maps")
values
file = values[2]
file = values$file[2]
name = paste0("figure-maps/",file,".csv")
name
figmap_csv <- name
file = str_remove(figmap_csv,"figure-maps/") %>% str_remove(".csv")
plot_list = gsub("_.*","",file)
figure_type = gsub(".*_","",file)
df <- read_csv(figmap_csv)
unique(df$ref_type)
tar_load(config)
config$fives
config$fives_sumtab
config$fives_proj
figure_type
if (! (figure_type %in% c("scatter","stackbar","ref_stackbar","timeseries","diffbar","cone","band","sankey","corrplot"))) {
rlang::abort("Please use 'scatter','stackbar','ref_stackbar','timeseries','diffbar','cone','band','sankey','corrplot' for figure_type.")
}
if (figure_type == "diffbar"){
df <- read_csv(figmap_csv)
if (!unique(df$ref_type) %in% c("year")){
rlang::abort("Unrecognized diffbar: Please use 'year' for ref_type.")
}
else {
if (!unique(df$ref_value) %in% config$fives_sumtab){
rlang::abort("Unrecognized diffbar: Please use year in config$fives_sumtab for ref_value.")
}
}
}
values = figmap_values("figure-maps")
values
files = tibble(file = list.files(folder)) %>%
mutate(file = str_remove(file, ".csv"))
files
file
file <- values$file[3]
file
name = paste0("figure-maps/",file,".csv")
figmap_csv = paste0("figure-maps/",file,".csv")
figmap_csv
file = str_remove(figmap_csv,"figure-maps/") %>% str_remove(".csv")
plot_list = gsub("_.*","",file)
figure_type = gsub(".*_","",file)
figmap = import_figure_csv(plot_list, figure_type, figmap_csv, config, settings)
figure_type
file
plot_list
figure_type
figure_type <- 'diffbar'
figmap = import_figure_csv(plot_list, figure_type, figmap_csv, config, settings)
tar_load(settings)
# Define targets
tar_plan(
##### Config and settings -----------------
settings = list(
version = "2024_BTR1",
scen_mapping = read_scen_mapping(crosswalk_model_runs_csv),
template = template,
calculated_var = all_calculated
),
config = list(
# models
model_wam = c("GCAM-LTS","GCAM-PNNL","NEMS-OP"),
model_wm = c("GCAM","NEMS","USREP-ReEDS"),
# scenarios
ghgi_scen = "wm_v1", # Set usproj scenario to pull ghgi data
scen_wm = c("wm"),
# regions
usa = "United States",
# years
base_year = 2021, # TODO: update to 2022 when we get updated inventory
fives = c(seq(2005,2021,by = 1),seq(2025,2040,by = 5)),
fives_sumtab = c(seq(2005,2020,by = 5),2022,seq(2025,2040,by = 5)),
annual = c(seq(2005,2040,by = 1)),
fives_lts = c(seq(2005,2022,by = 1),seq(2025,2050,by = 5)),
annual_lts = c(seq(2005,2050,by = 1)),
fives_proj = c(seq(2020,2050, by = 5)),
annual_proj = c(seq(2020,2050, by = 1)),
last_proj = 2040,
annual_1990 = c(seq(1990,2040,by = 1)),
annual_2010 = c(seq(2010,2040,by = 1)),
table = c(2005, 2010, 2015, 2020, 2021, 2025, 2030 , 2035, 2040),
# ordering
gas_order = c("CO2", "CH4", "N2O", "HFCs", "PFCs", "SF6"), #TODO: Make sure NF3 is included in USPROJ data>>>>>>> Stashed changes
sector_order = c("Energy","Transportation","IPPU","Agriculture","Waste","LULUCF")
),
##### Template + Crosswalks ---------------------------------------------------
# BTR reporting template
tar_target(template_xlsx, "data-raw/template/EMF37_data_template_R2_v2.xlsx", format = "file"),
tar_target(template, read_emf_template_xlsx(template_xlsx)),
# scenario+model crosswalks
tar_target(crosswalk_model_runs_csv, "data-raw/crosswalk/crosswalk_model-runs.csv", format = "file"),
tar_target(crosswalk_usproj_csv, "data-raw/crosswalk/crosswalk_usproj.csv", format = "file"),
#### Data Files ----------------------------------------------------------------
# WM and WAM scenario - BTR template modeling
tar_target(data_folder, "data-raw/model-runs/", format = "file"),
tar_target(data_files, dir_ls(data_folder), format = "file"),
# usproj Non-CO2 and CO2 from IPPU and NEU
tar_target(usproj_data_folder, "data-raw/usproj-data/", format = "file"),
tar_target(usproj_files, dir_ls(usproj_data_folder), format = "file"),
# Past projections and drivers
tar_target(past_proj_csv, "data-raw/ncbr_comparison/netghg_ncbr_comparisons.csv", format = "file"),
tar_target(past_proj, read_csv(past_proj_csv)),
tar_target(past_driver_csv, "data-raw/ncbr_comparison/tbl_5-6_drivers_comparison.csv", format = "file"),
tar_target(past_driver, read_csv(past_driver_csv)),
#### Data Processing -----------------------
# _calculated variables ----
tar_target(ratio_var_list, "data-raw/calculated-var/ratio_variables.csv", format = "file"),
ratio_var = readr::read_csv(ratio_var_list, col_types = cols()),
tar_target(summation_var_list, "data-raw/calculated-var/summation_variables.csv", format = "file"),
summation_var = readr::read_csv(summation_var_list, col_types = cols()),
tar_target(cumulative_var_list, "data-raw/calculated-var/cumulative_variables.csv", format = "file"),
cumulative_var = readr::read_csv(cumulative_var_list, col_types = cols()),
tar_target(annual_growth_rate_var_list, "data-raw/calculated-var/annualgrowthrate_variables.csv", format = "file"),
annual_growth_rate_var = readr::read_csv(annual_growth_rate_var_list, col_types = cols()),
tar_target(per_diff_var_list, "data-raw/calculated-var/per_diff_variables.csv", format = "file"),
per_diff_var = readr::read_csv(per_diff_var_list, col_types = cols()),
tar_target(index_var_list, "data-raw/calculated-var/index_variables.csv", format = "file"),
index_var = readr::read_csv(index_var_list, col_types = cols()),
tar_target(all_calculated, list(ratio_var = ratio_var,
summation_var=summation_var,
cumulative_var = cumulative_var,
annual_growth_rate_var = annual_growth_rate_var,
per_diff_var = per_diff_var)),
# _modeled-data long ----
data_loaded = {
map_dfr(data_files, ~read_process_data_file(.x, settings)) %>%
arrange_standard()},
data_long = make_data_long(data_loaded, settings),
data_long_clean = make_data_long_clean(data_long,
ratio_var,
summation_var,
cumulative_var,
annual_growth_rate_var,
per_diff_var,
config,
settings),
# _usproj data long ----
# TODO: Need to update usproj projections for FFCUST - need data from OP-NEMS
usproj_data_loaded = {
map_dfr(usproj_files, ~read_usproj_data_file(.x, crosswalk_usproj_csv)) %>%
arrange_standard()},
usproj_data_long_all = make_usproj_data_long(usproj_data_loaded, settings),
# usproj w/o historical data
usproj_data_long = gen_usproj_projections(usproj_data_long_all, config),
# _ghgi data ----
ghgi_cat = gen_usproj_ghgi(usproj_data_long_all, config),
# load lulucf ----
tar_target(lulucf_folder, "data-raw/lulucf/", format = "file"),
tar_target(lulucf_files, dir_ls(lulucf_folder), format = "file"),
tar_target(lulucf_crosswalk_csv, "data-raw/crosswalk/crosswalk_lulucf.csv", format = "file"),
tar_target(lulucf_crosswalk, read_csv(lulucf_crosswalk_csv)),
lulucf_data = {
map_dfr(lulucf_files, ~read_lulucf_data_file(.x, lulucf_crosswalk, var_crosswalk)) %>%
arrange_standard()},
### Projections Compilation --------------
# crosswalk between BTR and usproj template variables
tar_target(var_crosswalk_csv, "data-raw/crosswalk/crosswalk_var.csv", format = "file"),
tar_target(var_crosswalk, read_csv(var_crosswalk_csv)), # TODO: CHECK FOR VARIABLES!
ffc_raw_data = get_ffc_model_runs(data_long_clean, var_crosswalk, usproj_data_long),
usproj_all = add_ffc_lulucf(ffc_raw_data, lulucf_data, usproj_data_long, var_crosswalk, config),
# crosswalk compilation
tar_target(crosswalk_compilation_csv, "data-raw/crosswalk/crosswalk_compilation.csv", format = "file"),
tar_target(crosswalk_compilation, read_csv(crosswalk_compilation_csv)), # TODO: CHECK FOR MODELS AND SCENARIOS!
# _complete projections ----
projections_all = map_proj_name_v2(usproj_all, crosswalk_compilation, config, settings),
projections_ghgi = add_historical_data(ghgi_cat, projections_all), # bind ghgi historical data to projectiosn
projections_all_sm = gen_proj_all_sm(projections_ghgi, settings), # gas and sector sums for each projection
# _summary table breakouts ----
lulucf_sink_breakout = gen_lulucf_sink_breakout(projections_all_sm, config), #TODO: Figure out where to net out positive LULUCF Emissions, figure out if sink is just co2
gas_dataset = gen_gas_dataset(projections_all_sm, config),
gas_breakout = gen_gas_breakout(gas_dataset, config, category_order = config$gas_order),
sector_dataset = gen_sector_dataset(projections_all_sm, config),
sector_breakout = gen_sector_breakout(sector_dataset, config, category_order = config$sector_order),
# Sum Total Gross Emissions ----
tar_target(total_gross_emissions, gen_total_gross_emissions(gas_breakout)),
# Calculate Total Net Emissions and write ----
tar_target(total_net_emissions, gen_total_net_emissions(gas_breakout, lulucf_sink_breakout, settings)),
#### 3) projections_net_ghg - projections_all_sm %>% group_by(proj_name) and summarize - net all emissions and sum, should just be one number. export to output csv
## Markdown
#### 1) create gas and sector summary tables
#### 2) create basic projections figure - historic net ghg and full projection range
# group compilation
### QA/QC ----
check_nrg_excl_trn_acct = {
nrg_excl_trn_acct <- data_long_clean %>%
filter(variable %in% c('BTR|Emissions|CO2|Energy excl TRN Subtract','BTR|Emissions|CO2|Energy excl TRN Sum'))%>%
pivot_wider(names_from = variable) %>%
mutate(diff = `BTR|Emissions|CO2|Energy excl TRN Sum` - `BTR|Emissions|CO2|Energy excl TRN Subtract`)
},
### Figure mapping --------------
tar_map(
values = figmap_values("figure-maps"),
tar_target(figmap_csv, figmap_csv_target(file), format = "file"),
tar_target(figmap, figmap_target(figmap_csv, config, settings))
),
### Outputs ----
tar_render(ncbr_btr_comparison,
"docs/report/ncbr_btr_comparison.Rmd",
output_dir = paste0('output/',settings$version,"/tables_figs/"),
output_file = "ncbr_btr_comparison.html",
params = list(mode = "targets")),
tar_render(btr_tables_figs,
"docs/report/btr1_tables_figs.Rmd",
output_dir = paste0('output/',settings$version,"/tables_figs/"),
output_file = "btr1_tables_figs.html",
params = list(mode = "targets")),
# tar_render(results_overview,
#            "docs/report/results_overview.Rmd",
#            output_dir = paste0('output/',settings$version,"/presentations/"),
#            output_file = paste0("results_summary_", Sys.time(), ".html"),
#            params = list(mode = "targets")),
btr_sb = create_graph("cross-model comparison", "stacked_bar", config, settings, data_long_clean, figmap_btr_stackbar),
btr_db = create_graph("cross-model comparison", "diff_bar", config, settings, data_long_clean, figmap_btr_diffbar),
btr_ts = create_graph("cross-model comparison", "time_series", config, settings, data_long_clean, figmap_btr_timeseries),
btr_cu = create_graph("cross-model comparison", "cone_uncertainty", config, settings, data_long_clean, figmap_btr_cone)
)
tar_make(settings)
tar_load(settings)
figmap = import_figure_csv(plot_list, figure_type, figmap_csv, config, settings)
figure_type
plot_list
figmap_csv
df
if (! (figure_type %in% c("scatter","stackbar","ref_stackbar","timeseries","diffbar","cone","band","sankey","corrplot"))) {
rlang::abort("Please use 'scatter','stackbar','ref_stackbar','timeseries','diffbar','cone','band','sankey','corrplot' for figure_type.")
}
if (figure_type == "diffbar"){
df <- read_csv(figmap_csv)
if (!unique(df$ref_type) %in% c("year")){
rlang::abort("Unrecognized diffbar: Please use 'year' for ref_type.")
}
else {
if (!unique(df$ref_value) %in% config$fives_sumtab){
rlang::abort("Unrecognized diffbar: Please use year in config$fives_sumtab for ref_value.")
}
}
}
import_figure_csv <- function(plot_list, figure_type, figmap_csv, config, settings) {
if (! (figure_type %in% c("scatter","stackbar","ref_stackbar","timeseries","diffbar","cone","band","sankey","corrplot"))) {
rlang::abort("Please use 'scatter','stackbar','ref_stackbar','timeseries','diffbar','cone','band','sankey','corrplot' for figure_type.")
}
if (figure_type == "diffbar"){
df <- read_csv(figmap_csv)
if (!unique(df$ref_type) %in% c("year")){
rlang::abort("Unrecognized diffbar: Please use 'year' for ref_type.")
}
else {
if (!unique(df$ref_value) %in% config$fives_sumtab){
rlang::abort("Unrecognized diffbar: Please use year in config$fives_sumtab for ref_value.")
}
}
}
df = readr::read_csv(figmap_csv, col_types = cols())
status = df %>%
assert_figure_csv_has_standard_columns(figure_type) %>%
assert_vars_in_template_or_calculated(figure_type, settings) %>%
assert_models_in_config(config, settings) %>%
assert_scenarios_in_config(config, settings) %>%
assert_regions_in_config(config) %>%
assert_years_in_config_or_numeric(config) %>%
assert_valid_page_filter(figure_type) %>%
check_figure_specification(figure_type)
if (status == TRUE) {
df %>% set_default_page_filter()
}
}
figmap = import_figure_csv(plot_list, figure_type, figmap_csv, config, settings)
figmap = import_figure_csv(plot_list, figure_type, figmap_csv, config, settings)
config$fives_sumtab
