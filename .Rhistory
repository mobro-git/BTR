tab_spanner(label = "Historical ", columns = all_of(hist_years), level = 2) %>%
tab_spanner(label = "Projected", columns = all_of(proj_col_order))%>%
tab_header(title = paste0('Historical and Projected U.S. GHG Emissions (2023 Policy Baseline), by ',stubhead,': 2005-2040 (MMT CO2e)')) %>%
text_transform(location = cells_stub(), row_label_md_gas) %>%
gt_theme_nc_blue()
}
gas_table <- create_html_table(gas_df, 'Gas',config)
gas_table
gas_table <- create_html_table(gas_df, 'Gas',config)
gas_table
create_html_table <- function(final_summary_table, stubhead, config){
hist_years <- c('2005','2010','2015','2020', config$base_year)
proj_col_order <- c('2025_low',
'2025_high',
'2030_low',
'2030_high',
'2035_low',
'2035_high',
'2040_low',
'2040_high')
html_table <-  final_summary_table %>%
rename(!!stubhead := category) %>%
gt() %>%
text_transform(location = cells_stub(), row_label_md_gas) %>%
tab_spanner(label = "2025", columns = proj_col_order[1:2]) %>%
tab_spanner(label = "2030", columns = proj_col_order[3:4]) %>%
tab_spanner(label = "2035", columns = proj_col_order[5:6]) %>%
tab_spanner(label = "2040", columns = proj_col_order[7:8]) %>%
cols_label(`2025_low` = 'Low') %>%
cols_label(`2030_low` = 'Low') %>%
cols_label(`2035_low` = 'Low') %>%
cols_label(`2040_low` = 'Low') %>%
cols_label(`2025_high` = 'High') %>%
cols_label(`2030_high` = 'High') %>%
cols_label(`2035_high` = 'High') %>%
cols_label(`2040_high` = 'High') %>%
cols_align('center', columns = everything()) %>%
cols_align('left', columns = stubhead) %>%
tab_spanner(label = "Historical ", columns = all_of(hist_years), level = 2) %>%
tab_spanner(label = "Projected", columns = all_of(proj_col_order))%>%
tab_header(title = paste0('Historical and Projected U.S. GHG Emissions (2023 Policy Baseline), by ',stubhead,': 2005-2040 (MMT CO2e)')) %>%
gt_theme_nc_blue()
}
create_html_table <- function(final_summary_table, stubhead, config){
hist_years <- c('2005','2010','2015','2020', config$base_year)
proj_col_order <- c('2025_low',
'2025_high',
'2030_low',
'2030_high',
'2035_low',
'2035_high',
'2040_low',
'2040_high')
html_table <-  final_summary_table %>%
rename(!!stubhead := category) %>%
gt() %>%
text_transform(location = cells_stub(), row_label_md_gas) %>%
tab_spanner(label = "2025", columns = proj_col_order[1:2]) %>%
tab_spanner(label = "2030", columns = proj_col_order[3:4]) %>%
tab_spanner(label = "2035", columns = proj_col_order[5:6]) %>%
tab_spanner(label = "2040", columns = proj_col_order[7:8]) %>%
cols_label(`2025_low` = 'Low') %>%
cols_label(`2030_low` = 'Low') %>%
cols_label(`2035_low` = 'Low') %>%
cols_label(`2040_low` = 'Low') %>%
cols_label(`2025_high` = 'High') %>%
cols_label(`2030_high` = 'High') %>%
cols_label(`2035_high` = 'High') %>%
cols_label(`2040_high` = 'High') %>%
cols_align('center', columns = everything()) %>%
cols_align('left', columns = stubhead) %>%
tab_spanner(label = "Historical ", columns = all_of(hist_years), level = 2) %>%
tab_spanner(label = "Projected", columns = all_of(proj_col_order))%>%
tab_header(title = paste0('Historical and Projected U.S. GHG Emissions (2023 Policy Baseline), by ',stubhead,': 2005-2040 (MMT CO2e)')) %>%
gt_theme_nc_blue()
}
gas_table <- create_html_table(gas_df, 'Gas',config)
gas_table
?text_transform
View(gas_df)
html_table <-  final_summary_table %>%
rename(!!stubhead := category)
final_summary_table <- gas_df
View(final_summary_table)
html_table <-  final_summary_table %>%
rename(!!stubhead := category)
stubhead = 'Gas'
html_table <-  final_summary_table %>%
rename(!!stubhead := category)
View(html_table)
html_table <-  final_summary_table %>%
text_transform(row_label_md_gas(final_summary_table$category))
final_summary_table$category
html_table <-  final_summary_table  %>%
rename(!!stubhead := category) %>%
gt() %>%
text_transform(row_label_md_gas(final_summary_table$category))
html_table
html_table
html_table <-  final_summary_table  %>%
rename(!!stubhead := category) %>%
gt() %>%
text_transform(row_label_md_gas(final_summary_table$category))
html_table
html_table
html_table <-  final_summary_table  %>%
rename(!!stubhead := category)
html_table <-  final_summary_table
View(html_table)
html_table <-  final_summary_table  %>%
mutate(category = row_label_md_gas(final_summary_table$category))
row_label_md_gas <- function(row_id) {
case_when(
row_id == "CO2" ~ "CO<sub>2</sub>",
row_id == "CH4" ~ "CH<sub>4</sub>",
row_id == "N2O" ~ "N<sub>2</sub>O",
row_id == "SF6" ~ "SF<sub>6</sub>",
row_id == "NF3" ~ "NF<sub>3</sub>")
}
row_label_md_gas <- function(row_id) {
case_when(
category == "CO2" ~ "CO<sub>2</sub>",
category == "CH4" ~ "CH<sub>4</sub>",
category == "N2O" ~ "N<sub>2</sub>O",
category == "SF6" ~ "SF<sub>6</sub>",
category == "NF3" ~ "NF<sub>3</sub>")
}
html_table <-  final_summary_table  %>%
mutate(category = row_label_md_gas(final_summary_table$category))
html_table <-  final_summary_table  %>%
mutate(category = row_label_md_gas(category))
glimpse(final_summary_table)
row_label_md_gas <- function(row_id) {
case_when(
Gas == "CO2" ~ "CO<sub>2</sub>",
Gas == "CH4" ~ "CH<sub>4</sub>",
Gas == "N2O" ~ "N<sub>2</sub>O",
Gas == "SF6" ~ "SF<sub>6</sub>",
Gas == "NF3" ~ "NF<sub>3</sub>")
}
html_table <-  final_summary_table  %>%
rename(!!stubhead := category)
View(html_table)
html_table <-  final_summary_table  %>%
rename(!!stubhead := category) %>%
gt() %>%
text_transform(row_label_md_gas)
html_table
html_table <-  final_summary_table  %>%
rename(!!stubhead := category) %>%
gt()
html_table
html_table$`_row_groups`
html_table$`_spanners`
subscript_numbers <- function(string) {
gsub("([0-9]+)","<sub>\\1</sub>",string,perl = TRUE)
}
html_table <-  final_summary_table  %>%
rename(!!stubhead := category) %>%
gt() %>%
text_transform(locations = cells_body(columns = 1),
fn = function(x) {
subscript_numbers(x)
})
html_table
tar_load(c(projections_all_sm, config))
tar_source()
gas_df <- create_summary_table('gas','wm', projections_all_sm, config)
sector_df <- create_summary_table('usproj_sector', 'wm', projections_all_sm, config)
gas_table <- create_html_table(gas_df, 'Gas',config)
gas_table
sector_table <- create_html_table(sector_df, 'Sector',config)
sector_table
# Create html table in the style of gt()
create_pct_change_html_table <- function(final_summary_table, stubhead, config){
hist_years <- c('2005','2010','2015','2020', config$base_year)
proj_col_order <- c('2025_low',
'2025_high',
'2030_low',
'2030_high',
'2035_low',
'2035_high',
'2040_low',
'2040_high')
html_table <-  final_summary_table %>%
rename(!!stubhead := category) %>%
gt() %>%
text_transform(locations = cells_body(columns = 1),
fn = function(x) {
subscript_numbers(x)
}) %>%
tab_spanner(label = "2025", columns = proj_col_order[1:2]) %>%
tab_spanner(label = "2030", columns = proj_col_order[3:4]) %>%
tab_spanner(label = "2035", columns = proj_col_order[5:6]) %>%
tab_spanner(label = "2040", columns = proj_col_order[7:8]) %>%
cols_label(`2025_low` = 'Low') %>%
cols_label(`2030_low` = 'Low') %>%
cols_label(`2035_low` = 'Low') %>%
cols_label(`2040_low` = 'Low') %>%
cols_label(`2025_high` = 'High') %>%
cols_label(`2030_high` = 'High') %>%
cols_label(`2035_high` = 'High') %>%
cols_label(`2040_high` = 'High') %>%
cols_align('center', columns = everything()) %>%
cols_align('left', columns = stubhead) %>%
#tab_spanner(label = "Historical ", columns = all_of(hist_years), level = 2) %>%
tab_spanner(label = "Projected", columns = all_of(proj_col_order))%>%
tab_header(title = paste0('Projected Percent Change U.S. GHG Emissions Compared to 2005 Levels (2023 Policy Baseline), by ',stubhead,': 2025-2040 (%)')) %>%
gt_theme_nc_blue()
}
pct_change_table_gas <- create_pct_change_table('gas', 'wm', projections_all_sm, config)
pct_change_html_gas <- create_pct_change_html_table(pct_change_table_gas, 'Gas', config)
pct_change_html_gas
tar_make(results_overview)
tar_invalidate(results_overview)
tar_make(results_overview)
tar_make(results_overview)
# Load packages required to define the pipeline:
library(targets)
library(tarchetypes)
source("packages.R")
# Load packages required to define the pipeline:
library(targets)
library(tarchetypes)
source("packages.R")
tar_invalidate(everything())
tar_source()
filepath <- "data-raw/usproj-data/usproj_emissions_2024_wide_for_btr_05022024_usprojRUN05152024.csv"
tar_make(crosswalk_usproj_csv)
print(paste0("Reading ",filepath))
crosswalk <- read_csv(crosswalk_usproj_csv)
join_vars <- c("datasrc", "model", "scenario")
raw <-  read_file_ext(filepath) %>%
mutate(datasrc = fs::path_file(filepath)) %>%
map_usproj_scenario_names(crosswalk) %>%
select(datasrc, model, scenario, everything(),-notes) %>%
country_abbr()
tar_make()
tar_make()
tar_outdated()
tar_make()
tar_make()
tar_make()
tar_load(data_files)
data_files
filepath <- data_files[1]
filepath
raw <-  read_file_ext(filepath)
column_renames <- c(
"model" = "Model",
"scenario" = "Scenario",
"region" = "Region",
"variable" = "Variable",
"unit" = "Unit",
"unit" = "Units",
"year" = "Year",
"value" = "Value",
"datasrc" = "file"
)
lowercase_names <- column_renames[column_renames %in% names(raw)]
raw_renamed = raw %>%
rename(!!! lowercase_names)
raw
View(raw)
raw_data_cols <- c("model",
"scenario",
"region",
"variable",
"unit")
if(! all(raw_data_cols %in% names(raw_renamed))){
stop(paste0(setdiff(raw_data_cols, names(raw_renamed)),' column missing from ',fs::path_file(filepath),". "))
}
raw %>%
mutate(datasrc = fs::path_file(filepath))
data <- raw %>%
mutate(datasrc = fs::path_file(filepath))
min <- data %>%
process_minimal_from_raw()
# standardization steps:
std <- min %>%
standardize_col_names() %>%
standardize_row_data(settings) %>%
filter(!is.na(unit)) %>%
normalize_units()
View(min)
data_not_long <- data %>%
select(-starts_with("...")) %>% # empty col headers dropped
janitor::remove_empty("rows")
#' transform_to_long
#' @param data
#' Transform original EMF format data to long format
#' Specifically, transform columns 2010 to 2100 into year and value
#' filter out na values and set year to numeric
#'
#' @return data
#'
#' @export
transform_to_long <- function(data) {
if(!any(c("value","Value") %in% names(data))){
data %>%
tidyr::pivot_longer(
cols = num_range(prefix = "", range = 2005:2100),
names_to = "year",
values_to = "value"
) %>%
mutate(year = as.numeric(year)) %>%
filter(!is.na(value))
} else {
data
}
}
min <- data %>%
process_minimal_from_raw()
View(min)
# standardization steps:
std <- min %>%
standardize_col_names() %>%
standardize_row_data(settings) %>%
filter(!is.na(unit)) %>%
normalize_units()
std <- min %>%
standardize_col_names()
std <- min %>%
standardize_col_names() %>%
standardize_row_data(settings)
standard_data <-
data %>%
filter(!is.na(model) & !is.na(scenario)) %>%
# Only keep variable data which is in the template
filter(variable %in% settings$template$variable) %>%
# Only keep data with variable/unit combination that match the template
semi_join(settings$template, by = c("variable", "unit")) %>%
mutate(year = as.numeric(year),
value = as.numeric(value)) %>%
mutate(value = if_else(unit == "%", value * .01, value)) # pct 100 -> 1
data %>%
filter(!is.na(model) & !is.na(scenario)) %>%
# Only keep variable data which is in the template
filter(variable %in% settings$template$variable) %>%
# Only keep data with variable/unit combination that match the template
semi_join(settings$template, by = c("variable", "unit")) %>%
mutate(year = as.numeric(year),
value = as.numeric(value)) %>%
mutate(value = if_else(unit == "%", value * .01, value)) # pct 100 -> 1
View(data)
View(raw)
View(data)
filepath
raw <-  read_file_ext(filepath)
column_renames <- c(
"model" = "Model",
"scenario" = "Scenario",
"region" = "Region",
"variable" = "Variable",
"unit" = "Unit",
"unit" = "Units",
"year" = "Year",
"value" = "Value",
"datasrc" = "file"
)
lowercase_names <- column_renames[column_renames %in% names(raw)]
raw_renamed = raw %>%
rename(!!! lowercase_names)
View(raw_renamed)
raw_data_cols <- c("model",
"scenario",
"region",
"variable",
"unit")
raw_renamed = raw %>%
rename(!!! lowercase_names)
raw_data_cols <- c("model",
"scenario",
"region",
"variable",
"unit")
data <- raw_renamed %>%
mutate(datasrc = fs::path_file(filepath))
View(data)
data <- read_raw_data_file(filepath) %>%
process_minimal_from_raw() %>%
standardize_col_names()
View(data)
# read_raw_data_file(filepath) %>%
#   process_minimal_from_raw() %>%
#   standardize_col_names()
#
data <- read_raw_data_file(filepath) %>%
process_minimal_from_raw() %>%
standardize_col_names()
tar_invalidate(data_loaded)
tar_make(data_loaded)
tar_load(data_loaded)
print(paste0("Reading ",filepath))
read_raw_data_file(filepath) %>%
process_data_file(settings, filepath)
tar_invalidate(data_loaded)
tar_source()
tar_make(data_loaded)
rm(data_loaded)
tar_load(data_loaded)
tar_invalidate(everthing())
tar_invalidate(everything())
tar_make(data_loaded)
tar_invalidate(everything())
tar_make(data_loaded)
tar_invalidate(everything())
tar_make(data_loaded)
filepath <- data_files[1]
print(paste0("Reading ",filepath))
read_raw_data_file(filepath) %>%
process_data_file(settings = settings, filepath = filepath)
tar_source()
data <- read_raw_data_file(filepath) %>%
process_data_file(settings = settings, filepath = filepath)
data <- read_raw_data_file(filepath) %>%
process_data_file(settings = settings, filepath = filepath)
data <- read_raw_data_file(filepath) %>%
process_data_file(settings = settings, filepath = filepath)
data_raw <-  read_raw_data_file(filepath)
View(data_raw)
data <- data_raw
min <- data %>%
process_minimal_from_raw()
# standardization steps:
std <- min %>%
standardize_col_names() %>%
standardize_row_data(settings) %>%
filter(!is.na(unit)) %>%
normalize_units()
res <- std %>%
# analysis stuff:
map_scenario_names(settings$scen_mapping) %>%
filter(!is.na(scenario)) %>%
# TODO: need to re-format transform_to_national to handle all sub-national results
# transform_to_national() %>% # right now uses sum(.x, na.rm = TRUE)
select(model, scenario, region, variable, unit, year, value, datasrc) %>%
assert_has_standard_cols()
View(res)
res <- std %>%
# analysis stuff:
map_scenario_names(settings$scen_mapping) %>%
filter(!is.na(scenario)) %>%
# TODO: need to re-format transform_to_national to handle all sub-national results
# transform_to_national() %>% # right now uses sum(.x, na.rm = TRUE)
select(model, scenario, region, variable, unit, year, value, datasrc) %>%
assert_has_standard_cols()
if(nrow(res)==0) {
rlang::abort(paste0("No valid data in ", filepath,". Check that variable names and units match reporting template."))
}
tar_invalidate(everything())
tar_make(data_loaded)
tar_make()
tar_make()
tar_load(data_files)
data_files
filepath <- data_files[6]
print(paste0("Reading ",filepath))
read_raw_data_file(filepath)
tar_source()
raw <- read_raw_data_file(filepath)
glimpse(raw)
data <- raw
min <- data %>%
process_minimal_from_raw()
# standardization steps:
std <- min %>%
standardize_col_names() %>%
standardize_row_data(settings) %>%
filter(!is.na(unit)) %>%
normalize_units()
# standardization steps:
std <- min %>%
standardize_col_names() %>%
standardize_row_data(settings) %>%
filter(!is.na(unit)) %>%
normalize_units()
View(std)
res <- std %>%
# analysis stuff:
map_scenario_names(settings$scen_mapping) %>%
filter(!is.na(scenario)) %>%
# TODO: need to re-format transform_to_national to handle all sub-national results
# transform_to_national() %>% # right now uses sum(.x, na.rm = TRUE)
select(model, scenario, region, variable, unit, year, value, datasrc) %>%
assert_has_standard_cols()
if(nrow(res)==0) {
rlang::abort(paste0("No valid data in ", filepath,". Check that variable names and units match reporting template."))
}
tar_invalidate(data_loaded)
tar_make()
tar_make(data_long)
tar_make()
View(usproj_data_long)
View(data_long_clean)
tar_make()
tar_make()
tar_make()
tar_make()
# Pull in color palette and figure elements
source("scripts/theming.R")
tar_outdated
tar_outdated()
tar_visnetwork()
tar_make(nrgco2_sb)
tar_make()
# Load packages required to define the pipeline:
library(targets)
library(tarchetypes)
source("packages.R")
View(usproj_data_long)
View(var_crosswalk)
