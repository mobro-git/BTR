print(paste0("Reading ",filepath))
read_raw_data_file(filepath) %>%
process_data_file(config)
}
raw <-  read_file_ext(filepath) %>%
mutate(datasrc = fs::path_file(filepath)) %>%
select(datasrc, everything()) %>%
left_join(crosswalk, by='datasrc')
View(raw)
raw <-  read_file_ext(filepath) %>%
mutate(datasrc = fs::path_file(filepath)) %>%
left_join(crosswalk, by='datasrc') %>%
select(datasrc, model, scenario, everything(),-notes)
unique(raw$scenario)
unique(raw$datasrc)
tar_make()
tar_make()
tar_load(usproj_data_loaded)
View(usproj_data_loaded)
unique(usproj_data_loaded$datasrc)
unique(usproj_data_loaded$scenario)
unique(usproj_data_loaded$model)
View(data_long_clean)
data_long <- usproj_data_loaded %>% {
# drop all-zero model-run-variable data
group_by(., model, scenario, variable) %>%
filter(!all(value == 0)) %>%
ungroup()} %>%
relocate_standard_col_order() %>%
arrange_standard() %>%
country_abbr() %>%
filter(!is.na(value))
data_long <- usproj_data_loaded %>% {
# drop all-zero model-run-variable data
group_by(., model, scenario, variable) %>%
filter(!all(value == 0)) %>%
ungroup()}
View(usproj_data)
tar_load(data_long)
View(data_long)
tar_load(data_loaded)
usproj_data_long <- usproj_data_loaded %>%
tidyr::pivot_longer(
cols = num_range(prefix = "", range = 2010:2100),
names_to = "year",
values_to = "value")%>%
mutate(year = as.numeric(year))
View(usproj_data_long)
View(usproj_data_long)
usproj_data_long <- usproj_data_loaded %>%
tidyr::pivot_longer(
cols = num_range(prefix = "", range = 1990:2100),
names_to = "year",
values_to = "value")%>%
mutate(year = as.numeric(year))
source("C:/Users/dlopez/Github/BTR/R/2d_make_data_long.R")
usproj_data_long <- usproj_data_loaded %>%
tidyr::pivot_longer(
cols = num_range(prefix = "", range = 1990:2100),
names_to = "year",
values_to = "value")%>%
mutate(year = as.numeric(year)) %>%
select(
model,
scenario,
usproj_category,
usproj_source,
usproj_subsource,
usproj_sector,
gas,
year,
value,
unit,
region,
datasrc
)
usproj_data_long <- usproj_data_loaded %>%
tidyr::pivot_longer(
cols = num_range(prefix = "", range = 1990:2100),
names_to = "year",
values_to = "value")%>%
mutate(year = as.numeric(year)) %>%
select(
model,
scenario,
usproj_category,
usproj_source,
usproj_subsource,
usproj_sector,
gas,
year,
value,
unit,
region,
datasrc
) %>%
replace(is.na(value),0)
usproj_data_long <- usproj_data_loaded %>%
tidyr::pivot_longer(
cols = num_range(prefix = "", range = 1990:2100),
names_to = "year",
values_to = "value")%>%
mutate(year = as.numeric(year)) %>%
select(
model,
scenario,
usproj_category,
usproj_source,
usproj_subsource,
usproj_sector,
gas,
year,
value,
unit,
region,
datasrc
) %>%
replace(is.na(.),0)
naniar::vis_miss(usproj_data_long)
usproj_data_long <- usproj_data_loaded %>%
tidyr::pivot_longer(
cols = num_range(prefix = "", range = 1990:2100),
names_to = "year",
values_to = "value")%>%
mutate(year = as.numeric(year)) %>%
select(
model,
scenario,
usproj_category,
usproj_source,
usproj_subsource,
usproj_sector,
gas,
year,
value,
unit,
region,
datasrc
)
naniar::vis_miss(usproj_data_long)
tar_make()
tar_load(usproj_data_long)
View(usproj_data_long)
print(unique(usproj_data_long$scenario))
print(unique(usproj_data_long$model))
print(unique(usproj_data_long$year))
# Load packages required to define the pipeline:
library(targets)
library(tarchetypes)
tar_make()
# Load packages required to define the pipeline:
library(targets)
library(tarchetypes)
source("packages.R")
tar_load(var_crosswalk)
tar_load(config)
tar_load(usproj_all)
View(usproj_all)
proj_only <- usproj_all %>% filter(year > config$base_year) %>% filter(region == 'United States')
View(var_crosswalk)
tar_load(crosswalk_compilation)
View(crosswalk_compilation)
proj_usa <- usproj_all %>% filter(region == 'United States')
merged_df <- merge(proj_usa, crosswalk_compilation, by.x = c('model','scenario'), by.y = c('ffc_model', 'ffc_scenario'), all.x = TRUE)
merged_df <- merge(proj_usa, crosswalk_compilation, by.x = c('model','scenario'), by.y = c('ffc_model', 'ffc_scen'), all.x = TRUE)
View(merged_df)
merged_df$proj_name <- ifelse(merged_df$year > config$base_year,
ifelse(is.na(merged_df$proj_name), merged_df$usproj_scen, merged_df$proj_name),
'ghgi')
unique(proj_usa$model)
unique(proj_usa$scenario)
proj_names <- vector('character', nrow(proj_usa))
View(proj_usa)
i=500
row <- proj_usa[i,]
View(row)
proj_names <- vector('character', nrow(proj_usa))
if (row$year > config$base_year) {
if (row$model == 'usproj') {
proj_names[i] <- 'usproj'
}
else if (row$model %in% crosswalk_compilation$ffc_model) {
merged_row <- row %>% left_join(crosswalk_compilation, by = c('model'='ffc_model', 'scenario'='ffc_scen'))
proj_names[i] <- merged_row$proj_name
}
}
proj_names[500]
i <- 2
row <- proj_usa[i,]
row <- proj_usa[i,]
model <- row$model
scenario <- row$scenario
year <- row$year
if (year > config$base_year) {
if (model == 'usproj') {
proj_names[i] <- 'usproj'
}
else if (model %in% crosswalk_compilation$ffc_model) {
merged_row <- row %>% left_join(crosswalk_compilation, by = c('model'='ffc_model', 'scenario'='ffc_scen'))
proj_names[i] <- merged_row$proj_name
}
else print(paste('Model name:', model, ', is not recognized.'))
}
proj_names[i] <- 'usproj'
for(i in 1:nrow(proj_usa)){
row <- proj_usa[i,]
model <- row$model
scenario <- row$scenario
year <- row$year
if (year > config$base_year) {
if (model == 'usproj') {
proj_names[i] <- 'usproj'
}
else if (model %in% crosswalk_compilation$ffc_model) {
merged_row <- row %>% left_join(crosswalk_compilation, by = c('model'='ffc_model', 'scenario'='ffc_scen'))
proj_names[i] <- merged_row$proj_name
}
else print(paste('Model name:', model, ', is not recognized.'))
}
else proj_names[i] <- 'ghgi_historical'
}
proj_usa$proj_name <- proj_names
test <- proj_usa %>% select(proj_name, everything())
View(test)
unique(test$proj_name)
View(proj_usa$proj_name == NA)
View(proj_usa$proj_name == "NA")
View(proj_usa %>% filter(! proj_name %in% c('ghgi_historical', 'usproj', 'test1', 'test2', 'test3')))
for(i in 1:nrow(proj_usa)){
row <- proj_usa[i,]
model <- row$model
scenario <- row$scenario
year <- row$year
if (year > config$base_year) {
if (model == 'usproj') {
proj_names[i] <- 'usproj'
}
else if (model %in% crosswalk_compilation$ffc_model & scenario %in% crosswalk_compilation$ffc_scen) {
merged_row <- row %>% left_join(crosswalk_compilation, by = c('model'='ffc_model', 'scenario'='ffc_scen'))
proj_names[i] <- merged_row$proj_name
}
else print(paste('Model or Scenario name:', model,' ',scenario, ', is not recognized by crosswalk.'))
}
else proj_names[i] <- 'ghgi_historical'
}
for(i in 1:nrow(proj_usa)){
row <- proj_usa[i,]
model <- row$model
scenario <- row$scenario
year <- row$year
if (year > config$base_year) {
if (model == 'usproj') {
proj_names[i] <- 'usproj'
}
else if (model %in% crosswalk_compilation$ffc_model & scenario %in% crosswalk_compilation$ffc_scen) {
merged_row <- row %>% left_join(crosswalk_compilation, by = c('model'='ffc_model', 'scenario'='ffc_scen'))
proj_names[i] <- merged_row$proj_name
}
else print(paste('Model or Scenario name:', '(',model,', ',scenario,')', ', is not recognized by crosswalk.'))
}
else proj_names[i] <- 'ghgi_historical'
}
proj_usa <- usproj_all %>% filter(region == 'United States')
proj_names <- vector('character', nrow(proj_usa))
for(i in 1:nrow(proj_usa)){
row <- proj_usa[i,]
model <- row$model
scenario <- row$scenario
year <- row$year
if (year > config$base_year) {
if (model == 'usproj') {
proj_names[i] <- 'usproj'
}
else if (model %in% crosswalk_compilation$ffc_model & scenario %in% crosswalk_compilation$ffc_scen) {
merged_row <- row %>% left_join(crosswalk_compilation, by = c('model'='ffc_model', 'scenario'='ffc_scen'))
proj_names[i] <- merged_row$proj_name
}
else print(paste('Model or Scenario name:', '(',model,', ',scenario,')', ', is not recognized by crosswalk.'))
}
else proj_names[i] <- 'ghgi_historical'
}
map_proj_name = function(usproj_all, crosswalk_compilation, config) {
proj_usa <- usproj_all %>% filter(region == 'United States')
proj_names <- vector('character', nrow(proj_usa))
for(i in 1:nrow(proj_usa)){
row <- proj_usa[i,]
model <- row$model
scenario <- row$scenario
year <- row$year
if (year > config$base_year) {
if (model == 'usproj') {
proj_names[i] <- 'usproj'
}
else if (model %in% crosswalk_compilation$ffc_model & scenario %in% crosswalk_compilation$ffc_scen) {
merged_row <- row %>% left_join(crosswalk_compilation, by = c('model'='ffc_model', 'scenario'='ffc_scen'))
proj_names[i] <- merged_row$proj_name
}
else print(paste('Model/Scenario combo:', '(',model,', ',scenario,')', ', is not recognized.'))
}
else proj_names[i] <- 'ghgi_historical'
}
proj_usa$proj_name <- proj_names
return(proj_usa %>% select(proj_name, everything()))
}
tar_invalidat(everything())
tar_invalidate(everything())
tar_make()
tar_make()
tar_load(proj_usa)
View(proj_usa)
test_30 <- proj_usa %>% filter(year==)
test_30 <- proj_usa %>% filter(year=='2030')
View(test_30)
tar_load(c(usproj_all, crosswalk_compilation, config))
i = 3
View(usproj_all)
proj_usa <- usproj_all %>% filter(region == 'United States')
proj_names <- vector('character', nrow(proj_usa))
View(proj_usa)
row <- proj_usa[i,]
View(row)
model <- row$model
scenario <- row$scenario
year <- row$year
if (year > config$base_year) {
if (model == 'usproj') {
proj_names[i] <- 'usproj'
}
else if (model %in% crosswalk_compilation$ffc_model & scenario %in% crosswalk_compilation$ffc_scen) {
merged_row <- row %>% left_join(crosswalk_compilation, by = c('model'='ffc_model', 'scenario'='ffc_scen'))
proj_names[i] <- merged_row$proj_name
}
else print(paste('Model/Scenario combo:', '(',model,', ',scenario,')', ', is not recognized.'))
}
for(i in 1:nrow(proj_usa)){
row <- proj_usa[i,]
model <- row$model
scenario <- row$scenario
year <- row$year
if (year > config$base_year) {
if (model == 'usproj') {
proj_names[i] <- 'usproj'
}
else if (model %in% crosswalk_compilation$ffc_model & scenario %in% crosswalk_compilation$ffc_scen) {
merged_row <- row %>% left_join(crosswalk_compilation, by = c('model'='ffc_model', 'scenario'='ffc_scen'))
proj_names[i] <- merged_row$proj_name
}
else print(paste('Model/Scenario combo:', '(',model,', ',scenario,')', ', is not recognized.'))
}
else proj_names[i] <- 'ghgi_historical'
}
i=3
row <- proj_usa[i,]
model <- row$model
scenario <- row$scenario
year <- row$year
model %in% crosswalk_compilation$ffc_model & scenario %in% crosswalk_compilation$ffc_scen
year > config$base_year
proj_names[i] <- 'ghgi_historical'
rm(proj_names)
proj_names <- vector('character', nrow(proj_usa))
proj_names[i] <- 'ghgi_historical'
i = 1
row <- proj_usa[i,]
model <- row$model
scenario <- row$scenario
year <- row$year
if (year > config$base_year) {
if (model == 'usproj') {
proj_names[i] <- 'usproj'
}
else if (model %in% crosswalk_compilation$ffc_model & scenario %in% crosswalk_compilation$ffc_scen) {
merged_row <- row %>% left_join(crosswalk_compilation, by = c('model'='ffc_model', 'scenario'='ffc_scen'))
proj_names[i] <- merged_row$proj_name
}
else print(paste('Model/Scenario combo:', '(',model,', ',scenario,')', ', is not recognized.'))
}
year > config$base_year
proj_names[i] <- 'ghgi_historical'
View(proj_usa)
View(crosswalk_compilation)
View(proj_usa)
View(test_30)
tar_make()
tar_make()
tar_make()
tar_load(c(lulucf_files, lulucf_crosswalk_csv))
tar_load(lulucf_crosswalk)
filepath <- lulucf_files[1]
print(paste0("Reading ",filepath))
read_raw_data_file(filepath) %>%
map_lulucf(lulucf_crosswalk)}
lulucf_test <- read_raw_data_file(filepath)
tar_source()
lulucf_test <- read_raw_data_file(filepath)
View(lulucf_test)
data <- lulucf_test
join_vars <- c("datasrc", "model", "scenario")
# make sure crosswalk has everything needed
preflight <- distinct_at(data, join_vars) %>%
anti_join(lulucf_crosswalk, by = join_vars)
scen_mapping <- select(lulucf_crosswalk, join_vars, model_new, scenario_new)
rm(scen_mapping)
scen_mapping <- select(lulucf_crosswalk, all_of(join_vars), model_new, scenario_new)
View(scen_mapping)
res <- data %>%
left_join(scen_mapping, by = join_vars) %>%
mutate(
model = model_new,
scenario = scenario_new
) %>%
select(-model_new, -scenario_new) %>%
select(model, scenario, region, year, variable, unit, value, everything()) %>%
assert_has_standard_cols()
View(res)
tar_make()
tar_make()
tar_load(lulucf_data)
View(lulucf_data)
rm(proj_usa)
tar_load(proj_usa)
View(proj_usa)
tar_load(var_crosswalk)
View(var_crosswalk)
tar_make()
View(lulucf_data)
tar_make(lulucf_data)
tar_make(lulucf_data)
tar_load(lulucf_data)
View(lulucf_data)
usproj_no_ffc_proj = usproj_data_long %>%
# remove FFC projections, keep only historic data - *****EXCEPT KEEP FFCUST PROJECTIONS (not in crosswalk)*****
filter(!(
usproj_category %in% unique(var_crosswalk$usproj_category) &
year > config$base_year)) %>%
mutate(btr_var = "") %>%
rbind(ffc_raw_data)
tar_load(usproj_data_long)
tar_load(ffc_raw_dasta)
tar_load(ffc_raw_data)
usproj_no_ffc_proj = usproj_data_long %>%
# remove FFC projections, keep only historic data - *****EXCEPT KEEP FFCUST PROJECTIONS (not in crosswalk)*****
filter(!(
usproj_category %in% unique(var_crosswalk$usproj_category) &
year > config$base_year)) %>%
mutate(btr_var = "") %>%
rbind(ffc_raw_data)
lulucf_ordered = lulucf_data %>% select(names(usproj_no_ffc_proj)) %>% rbind(usproj_no_ffc_proj)
View(lulucf_ordered)
# Load packages required to define the pipeline:
library(targets)
library(tarchetypes)
source("packages.R")
# Load packages required to define the pipeline:
library(targets)
library(tarchetypes)
source("packages.R")
tar_make()
tar_load(projection_all)
tar_load(projections_all)
View(projections_all)
View(projections_all)
tar_load(usproj_all)
View(usproj_all)
tar_load(config)
View(config)
historical <- usproj_all %>% filter(year <= config$base_year)
View(historical)
historical <- usproj_all %>% filter(region = 'United States') %>% filter(year <= config$base_year)
historical <- usproj_all %>% filter(region == 'United States') %>% filter(year <= config$base_year)
View(historical)
historical_ghgi <- historical %>% mutate(model == 'ghgi')
View(historical_ghgi)
historical_ghgi <- historical %>% mutate(model = 'ghgi')
historical_ghgi <- historical %>% mutate(proj_name = 'ghgi') %>% mutate(model = 'ghgi') %>% mutate(scenario = 'ghgi') %>% select(names(projections_all))
View(historical_ghgi)
historical_ghgi <- historical %>% mutate(proj_name = 'ghgi') %>%
mutate(model = 'ghgi') %>%
mutate(scenario = 'historical') %>%
select(names(projections_all))
projections_all <- projections_all %>% rbind(historical_ghgi)
View(projections_all)
config$fives
config$fives_lts
View(projections_all)
unique(projections_all$unit)
View(projections_all %>% filter(unit=="MMT CO2e"))
View(projections_all %>% filter(unit=="MMTCO2e"))
View(projections_all %>% filter(unit=="Mt CO2/yr"))
proj_group <- projections_all %>% group_by(proj_name, gas, usproj_sector, unit, year) %>% summarise(sum = sum())
View(proj_group)
proj_group <- projections_all %>% group_by(proj_name, gas, usproj_sector, unit, year) %>% summarise(sum = sum(value))
View(proj_group)
tar_source()
View(proj_group)
tar_make(config)
config$fives
fives = c(seq(2005,2022,by = 5),seq(2025,2040,by = 5))
fives
fives = c(seq(2005,2020,by = 5),2022,seq(2025,2040,by = 5)
fives = c(seq(2005,2020,by = 5),2022,seq(2025,2040,by = 5))
fives = c(seq(2005,2020,by = 5),2022,seq(2025,2040,by = 5))
fives
fives_sum <- proj_group %>% filter(year %in% fives)
View(fives_sum)
gas_dataset <- fives_sum %>% group_by(gas) %>% summarise(sum = sum(value))
gas_dataset <- fives_sum %>% group_by(gas) %>% summarise(value = sum(sum))
View(gas_dataset)
gas_dataset <- fives_sum %>% group_by(gas, year) %>% summarise(value = sum(sum))
gas_dataset <- fives_sum %>% group_by(gas, year) %>% summarise(mmtco2e = sum(sum))
sector_dataset <- fives_sum %>% group_by(usproj_sector, year) %>% summarise(mmtco2e = sum(sum))
View(sector_dataset)
