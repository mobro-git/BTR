summarise(value = sum(cat_sum)) %>%
group_by(year) %>%
mutate(low = min(value),
high = max(value)) %>%
select(year,low,high) %>%
distinct() %>%
mutate(category = 'Total Gross Emissions') %>%
select(all_of(col_order))
summary_total_net <- summary %>%
group_by(proj_name, year) %>%
summarise(value = sum(cat_sum)) %>%
group_by(year) %>%
mutate(low = min(value),
high = max(value)) %>%
select(year,low,high) %>%
distinct() %>%
mutate(category = 'Total Net Emissions') %>%
select(all_of(col_order))
if(category == 'gas'){
order_index <- c(2,1,4,3,5,6)
processed_datasets <- list()
for(gas in config$gas_order){
cat_summary <- summary %>%
filter(category == gas) %>%
group_by(proj_name, year) %>%
summarise(value = sum(cat_sum)) %>%
group_by(year) %>%
mutate(low = min(value),
high = max(value)) %>%
select(year, low, high) %>%
distinct() %>%
mutate(category = gas) %>%
select(all_of(col_order))
processed_datasets[[gas]] <- cat_summary
}
summary_table_df <- bind_rows(processed_datasets)
} else if(category == 'usproj_sector'){
processed_datasets <- list()
order_index <- c(2,5,3,1,6,4)
for(sector in config$sector_order){
cat_summary <- summary %>%
filter(category == sector) %>%
group_by(proj_name, year) %>%
summarise(value = sum(cat_sum)) %>%
group_by(year) %>%
mutate(low = min(value),
high = max(value)) %>%
select(year, low, high) %>%
distinct() %>%
mutate(category = sector) %>%
select(all_of(col_order))
processed_datasets[[sector]] <- cat_summary
}
summary_table_df <- bind_rows(processed_datasets)
}
else{rlang::abort('Enter "gas" or "usproj_sector" into as category.')}
summary_table_df_high_low <- create_high_low_df(summary_table_df)
summary_table_df_high_low <- summary_table_df_high_low[order_index,]
total_gross_emissions_high_low <- create_high_low_df(summary_total_gross)
total_net_emissions_high_low <- create_high_low_df(summary_total_net)
summary_lulucf_sink <- summary %>% filter(category == 'LULUCF Sink')%>%
group_by(category,proj_name, year) %>%
summarise(value = sum(cat_sum)) %>%
group_by(year) %>%
mutate(low = min(value),
high = max(value)) %>%
select(category, year, low, high) %>%
distinct()
lulucf_sink_high_low <- create_high_low_df(summary_lulucf_sink)
final_summary_table <- summary_table_df_high_low %>%
rbind(total_gross_emissions_high_low) %>%
rbind(lulucf_sink_high_low) %>%
rbind(total_net_emissions_high_low)
rownames(final_summary_table) <- NULL
final_summary_table <- final_summary_table %>% mutate_if(is.numeric, round)
return(final_summary_table)
}
tar_load(c(projections_all_sm, config))
gas_table <- create_summary_table('gas','wm', projections_all_sm, config)
sector_table <- create_summary_table('usproj_sector', 'wm', projections_all_sm, config)
View(gas_table)
View(sector_table)
gas_table %>%
kbl(caption = "Recreating booktabs style table") %>%
kable_classic(full_width = F, html_font = "Cambria")
net_ghg = projections_all_sm %>%
group_by(proj_name, grouping, year) %>%
summarise(sum = sum(sum)) %>%
filter(year %in% config$fives)
ghgi = net_ghg %>% filter(proj_name == "ghgi")
proj_no_connect = net_ghg %>%
filter(proj_name != "ghgi")
connect = ghgi[ghgi$year == 2021,]$sum
baseline = ghgi[ghgi$year == 2005,]$sum
proj_connect = proj_no_connect %>%
group_by(proj_name) %>%
slice(1) %>%
mutate(
year = 2021,
sum = ghgi$sum[ghgi$year == 2021])
proj = rbind(proj_no_connect, proj_connect) %>%
mutate(year = as.numeric(year))
targets = data.frame(
year = c(2020, 2025, 2030),
ymin = c((baseline * (1-.169)), (baseline * (1-.26)), (baseline * (1-.50))),
ymax = c((baseline * (1-.171)), (baseline * (1-.28)), (baseline * (1-.52))),
grouping = c("17% Below 2005","26-28% Below 2005","50-52% Below 2005")
)
projections = br_project(ghgi, proj, targets = TRUE)
tar_source
tar_source()
projections = br_project(ghgi, proj, targets = TRUE)
projections = br_project(ghgi, proj, targets = TRUE)
projections_all_sm <- projections_ghgi %>%
group_by(proj_name, grouping, gas, usproj_sector, year) %>%
summarise(sum = sum(value))
source('packages.R')
projections_all_sm <- projections_ghgi %>%
group_by(proj_name, grouping, gas, usproj_sector, year) %>%
summarise(sum = sum(value))
View(projections_all_sm)
proj_sm_test <- projections_all_sm %>% filter(year == 2005 | year == 2030)
View(proj_sm_test)
proj_sm_test <- projections_all_sm %>% filter(year == 2005 | year == 2030) %>% filter(grouping == 'ghgi' | grouping == 'wm')
projections_all_sm_pct_change <- proj_sm_test %>% mutate(pct_change_05 = (sum/lag(sum) -1)*(year==2005))
projections_all_sm_pct_change <- proj_sm_test %>% mutate(pct_change_05 = (sum/dplyr::lag(sum) -1)*(year==2005))
View(projections_all_sm_pct_change)
projections_all_sm_pct_change <- proj_sm_test  %>% group_by(gas, usproj_sector) %>% mutate(pct_change_05 = (sum/sum[year==2005]-1))
View(projections_all_sm_pct_change)
projections_all_sm <- projections_all_sm %>% group_by(gas, usproj_sector) %>% mutate(pct_change_05 = (sum/sum[year==2005]-1))
View(projections_all_sm)
projections_all_sm <- projections_all_sm %>% group_by(gas, usproj_sector) %>% mutate(pct_change_05 = round((sum/sum[year==2005]-1),2))
View(projections_all_sm)
View(projections_all_sm %>% filter(gas == 'CH4')%>% filter(usproj_sector == 'IPPU')%>% filter(year == 2005))
View(gas_dataset)
View(gas_breakout)
View(gas_breakout)
create_high_low_df <- function(summary_subset){
# Function to create low/high year columns from table row subsets
proj_years <- c('2025','2030','2035','2040')
hist_years <- c('2005','2010','2015','2020', config$base_year)
proj_col_order <- c('2025_low',
'2025_high',
'2030_low',
'2030_high',
'2035_low',
'2035_high',
'2040_low',
'2040_high')
df_low <- summary_subset %>%
select(category,year,low) %>%
pivot_wider(names_from = 'year',
values_from = 'low')
df_high <- summary_subset %>%
select(category,year,high) %>%
pivot_wider(names_from = 'year',
values_from = 'high')
df_merged <- merge(df_low[, c('category',proj_years)],df_high[, c('category',proj_years)], by = 'category', suffix = c('','_high'))
for(year in proj_years) {
colnames(df_merged)[colnames(df_merged)==year] <- paste0(year,'_low')
colnames(df_merged)[colnames(df_merged) == paste0(year,'_high')] <- paste0(year,'_high')
}
df_merge_final <- merge(df_low %>% select(category, all_of(hist_years)), df_merged) %>%
select(category, all_of(hist_years), all_of(proj_col_order))
}
create_summary_table <- function(category, grouping, projections_all_sm, config) {
col_order <- c('category','year','low','high')
summary <- projections_all_sm %>%
filter(!gas == 'Total') %>%  # WTH?? fix pls usproj
rename(category = .data[[category]]) %>%
filter(grouping == grouping) %>%
filter(year %in% config$table) %>%
group_by(proj_name,category, year) %>%
summarise(cat_sum = sum(sum))
summary_total_gross <- summary %>%
filter(!category == 'LULUCF Sink') %>%
group_by(proj_name, year) %>%
summarise(value = sum(cat_sum)) %>%
group_by(year) %>%
mutate(low = min(value),
high = max(value)) %>%
select(year,low,high) %>%
distinct() %>%
mutate(category = 'Total Gross Emissions') %>%
select(all_of(col_order))
summary_total_net <- summary %>%
group_by(proj_name, year) %>%
summarise(value = sum(cat_sum)) %>%
group_by(year) %>%
mutate(low = min(value),
high = max(value)) %>%
select(year,low,high) %>%
distinct() %>%
mutate(category = 'Total Net Emissions') %>%
select(all_of(col_order))
if(category == 'gas'){
order_index <- c(2,1,4,3,5,6)
processed_datasets <- list()
for(gas in config$gas_order){
cat_summary <- summary %>%
filter(category == gas) %>%
group_by(proj_name, year) %>%
summarise(value = sum(cat_sum)) %>%
group_by(year) %>%
mutate(low = min(value),
high = max(value)) %>%
select(year, low, high) %>%
distinct() %>%
mutate(category = gas) %>%
select(all_of(col_order))
processed_datasets[[gas]] <- cat_summary
}
summary_table_df <- bind_rows(processed_datasets)
} else if(category == 'usproj_sector'){
processed_datasets <- list()
order_index <- c(2,5,3,1,6,4)
for(sector in config$sector_order){
cat_summary <- summary %>%
filter(category == sector) %>%
group_by(proj_name, year) %>%
summarise(value = sum(cat_sum)) %>%
group_by(year) %>%
mutate(low = min(value),
high = max(value)) %>%
select(year, low, high) %>%
distinct() %>%
mutate(category = sector) %>%
select(all_of(col_order))
processed_datasets[[sector]] <- cat_summary
}
summary_table_df <- bind_rows(processed_datasets)
}
else{rlang::abort('Enter "gas" or "usproj_sector" into as category.')}
summary_table_df_high_low <- create_high_low_df(summary_table_df)
summary_table_df_high_low <- summary_table_df_high_low[order_index,]
total_gross_emissions_high_low <- create_high_low_df(summary_total_gross)
total_net_emissions_high_low <- create_high_low_df(summary_total_net)
summary_lulucf_sink <- summary %>% filter(category == 'LULUCF Sink')%>%
group_by(category,proj_name, year) %>%
summarise(value = sum(cat_sum)) %>%
group_by(year) %>%
mutate(low = min(value),
high = max(value)) %>%
select(category, year, low, high) %>%
distinct()
lulucf_sink_high_low <- create_high_low_df(summary_lulucf_sink)
final_summary_table <- summary_table_df_high_low %>%
rbind(total_gross_emissions_high_low) %>%
rbind(lulucf_sink_high_low) %>%
rbind(total_net_emissions_high_low)
rownames(final_summary_table) <- NULL
final_summary_table <- final_summary_table %>% mutate_if(is.numeric, round)
numeric_cols <- sapply(final_summary_table,is.numeric)
final_summary_table[, numeric_cols] <- lapply(final_summary_table[, numeric_cols], scales::comma)
return(final_summary_table)
}
create_html_table <- function(final_summary_table, stubhead){
hist_years <- c('2005','2010','2015','2020', config$base_year)
proj_col_order <- c('2025_low',
'2025_high',
'2030_low',
'2030_high',
'2035_low',
'2035_high',
'2040_low',
'2040_high')
html_table <-  final_summary_table %>%
rename(!!stubhead := category) %>%
gt() %>%
tab_spanner(label = "2025", columns = proj_col_order[1:2]) %>%
tab_spanner(label = "2030", columns = proj_col_order[3:4]) %>%
tab_spanner(label = "2035", columns = proj_col_order[5:6]) %>%
tab_spanner(label = "2040", columns = proj_col_order[7:8]) %>%
cols_label(`2025_low` = 'Low') %>%
cols_label(`2030_low` = 'Low') %>%
cols_label(`2035_low` = 'Low') %>%
cols_label(`2040_low` = 'Low') %>%
cols_label(`2025_high` = 'High') %>%
cols_label(`2030_high` = 'High') %>%
cols_label(`2035_high` = 'High') %>%
cols_label(`2040_high` = 'High') %>%
tab_spanner(label = "Historical ", columns = all_of(hist_years), level = 2) %>%
tab_spanner(label = "Projected", columns = all_of(proj_col_order))%>%
tab_header(title = paste0('Historical and Projected U.S. GHG Emissions (2023 Policy Baseline), by ',stubhead,': 2005-2040 (MMT CO2e)')) %>%
gt_theme_nc_blue()
}
create_high_low_df <- function(summary_subset){
# Function to create low/high year columns from table row subsets
proj_years <- c('2025','2030','2035','2040')
hist_years <- c('2005','2010','2015','2020', config$base_year)
proj_col_order <- c('2025_low',
'2025_high',
'2030_low',
'2030_high',
'2035_low',
'2035_high',
'2040_low',
'2040_high')
df_low <- summary_subset %>%
select(category,year,low) %>%
pivot_wider(names_from = 'year',
values_from = 'low')
df_high <- summary_subset %>%
select(category,year,high) %>%
pivot_wider(names_from = 'year',
values_from = 'high')
df_merged <- merge(df_low[, c('category',proj_years)],df_high[, c('category',proj_years)], by = 'category', suffix = c('','_high'))
for(year in proj_years) {
colnames(df_merged)[colnames(df_merged)==year] <- paste0(year,'_low')
colnames(df_merged)[colnames(df_merged) == paste0(year,'_high')] <- paste0(year,'_high')
}
df_merge_final <- merge(df_low %>% select(category, all_of(hist_years)), df_merged) %>%
select(category, all_of(hist_years), all_of(proj_col_order))
}
create_summary_table <- function(category, grouping, projections_all_sm, config) {
col_order <- c('category','year','low','high')
summary <- projections_all_sm %>%
filter(!gas == 'Total') %>%  # WTH?? fix pls usproj
rename(category = .data[[category]]) %>%
filter(grouping == grouping) %>%
filter(year %in% config$table) %>%
group_by(proj_name,category, year) %>%
summarise(cat_sum = sum(sum))
summary_total_gross <- summary %>%
filter(!category == 'LULUCF Sink') %>%
group_by(proj_name, year) %>%
summarise(value = sum(cat_sum)) %>%
group_by(year) %>%
mutate(low = min(value),
high = max(value)) %>%
select(year,low,high) %>%
distinct() %>%
mutate(category = 'Total Gross Emissions') %>%
select(all_of(col_order))
summary_total_net <- summary %>%
group_by(proj_name, year) %>%
summarise(value = sum(cat_sum)) %>%
group_by(year) %>%
mutate(low = min(value),
high = max(value)) %>%
select(year,low,high) %>%
distinct() %>%
mutate(category = 'Total Net Emissions') %>%
select(all_of(col_order))
if(category == 'gas'){
order_index <- c(2,1,4,3,5,6)
processed_datasets <- list()
for(gas in config$gas_order){
cat_summary <- summary %>%
filter(category == gas) %>%
group_by(proj_name, year) %>%
summarise(value = sum(cat_sum)) %>%
group_by(year) %>%
mutate(low = min(value),
high = max(value)) %>%
select(year, low, high) %>%
distinct() %>%
mutate(category = gas) %>%
select(all_of(col_order))
processed_datasets[[gas]] <- cat_summary
}
summary_table_df <- bind_rows(processed_datasets)
} else if(category == 'usproj_sector'){
processed_datasets <- list()
order_index <- c(2,5,3,1,6,4)
for(sector in config$sector_order){
cat_summary <- summary %>%
filter(category == sector) %>%
group_by(proj_name, year) %>%
summarise(value = sum(cat_sum)) %>%
group_by(year) %>%
mutate(low = min(value),
high = max(value)) %>%
select(year, low, high) %>%
distinct() %>%
mutate(category = sector) %>%
select(all_of(col_order))
processed_datasets[[sector]] <- cat_summary
}
summary_table_df <- bind_rows(processed_datasets)
}
else{rlang::abort('Enter "gas" or "usproj_sector" into as category.')}
summary_table_df_high_low <- create_high_low_df(summary_table_df)
summary_table_df_high_low <- summary_table_df_high_low[order_index,]
total_gross_emissions_high_low <- create_high_low_df(summary_total_gross)
total_net_emissions_high_low <- create_high_low_df(summary_total_net)
summary_lulucf_sink <- summary %>% filter(category == 'LULUCF Sink')%>%
group_by(category,proj_name, year) %>%
summarise(value = sum(cat_sum)) %>%
group_by(year) %>%
mutate(low = min(value),
high = max(value)) %>%
select(category, year, low, high) %>%
distinct()
lulucf_sink_high_low <- create_high_low_df(summary_lulucf_sink)
final_summary_table <- summary_table_df_high_low %>%
rbind(total_gross_emissions_high_low) %>%
rbind(lulucf_sink_high_low) %>%
rbind(total_net_emissions_high_low)
rownames(final_summary_table) <- NULL
final_summary_table <- final_summary_table %>% mutate_if(is.numeric, round)
numeric_cols <- sapply(final_summary_table,is.numeric)
final_summary_table[, numeric_cols] <- lapply(final_summary_table[, numeric_cols], scales::comma)
return(final_summary_table)
}
create_html_table <- function(final_summary_table, stubhead){
hist_years <- c('2005','2010','2015','2020', config$base_year)
proj_col_order <- c('2025_low',
'2025_high',
'2030_low',
'2030_high',
'2035_low',
'2035_high',
'2040_low',
'2040_high')
html_table <-  final_summary_table %>%
rename(!!stubhead := category) %>%
gt() %>%
tab_spanner(label = "2025", columns = proj_col_order[1:2]) %>%
tab_spanner(label = "2030", columns = proj_col_order[3:4]) %>%
tab_spanner(label = "2035", columns = proj_col_order[5:6]) %>%
tab_spanner(label = "2040", columns = proj_col_order[7:8]) %>%
cols_label(`2025_low` = 'Low') %>%
cols_label(`2030_low` = 'Low') %>%
cols_label(`2035_low` = 'Low') %>%
cols_label(`2040_low` = 'Low') %>%
cols_label(`2025_high` = 'High') %>%
cols_label(`2030_high` = 'High') %>%
cols_label(`2035_high` = 'High') %>%
cols_label(`2040_high` = 'High') %>%
tab_spanner(label = "Historical ", columns = all_of(hist_years), level = 2) %>%
tab_spanner(label = "Projected", columns = all_of(proj_col_order))%>%
tab_header(title = paste0('Historical and Projected U.S. GHG Emissions (2023 Policy Baseline), by ',stubhead,': 2005-2040 (MMT CO2e)')) %>%
gt_theme_nc_blue()
}
tar_load(c(projections_all_sm, config))
gas_df <- create_summary_table('gas','wm', projections_all_sm, config)
sector_df <- create_summary_table('usproj_sector', 'wm', projections_all_sm, config)
gas_table <- create_html_table(gas_df, 'Gas')
#' Apply a blue theme used in NatCom/BR to a gt table
#'
#' @param gt_object An existing gt table object of class `gt_tbl`
#' @param ... Optional additional arguments to `gt::table_options()`
#' @return An object of class `gt_tbl`
#' @export
#'
gt_theme_nc_blue <- function(gt_object) {
stopifnot("'gt_object' must be a 'gt_tbl', have you accidentally passed raw data?" = "gt_tbl" %in% class(gt_object))
gt_obj_out <- gt_object %>%
sub_missing(columns = everything(), missing_text = "---") %>%
opt_table_font(
font = c(
google_font("Lato"),
default_fonts()
)) %>%
tab_options(
#table.width = px(600),
table.font.size = 12,
data_row.padding = px(5),
heading.subtitle.font.weight = "normal",
heading.title.font.weight = "bold",
column_labels.font.weight = "bold",
heading.title.font.size = 18,
table.font.color.light = "#FFFFFF",
heading.background.color = "#FFFFFF",
heading.border.bottom.width = 0,
table_body.hlines.color = "#007BA7",
table_body.hlines.width = 1.5,
table_body.vlines.color = "#007BA7",
table_body.vlines.width = 1.5,
table_body.border.top.color = "#FFFFFF",
table_body.border.bottom.color = "#007BA7",
table.border.bottom.width = 1.5,
table.border.top.width = 1.5,
table.border.right.color = "#007BA7",
table.border.left.color = "#007BA7",
row_group.font.weight = "bolder",
row_group.background.color = "#e6edfc",
row_group.border.top.color = "#007BA7",
row_group.border.bottom.color = "#007BA7",
row_group.border.left.color = "#007BA7",
row_group.border.right.color = "#007BA7",
row_group.border.right.width = 2,
row_group.border.bottom.width = 2,
row_group.border.top.width = 2,
column_labels.background.color = "#007BA7",
column_labels.text_transform = "capitalize",
column_labels.border.lr.color = "#FFFFFF",
column_labels.border.lr.width = 3,
column_labels.border.top.width = 0,
column_labels.border.bottom.width = 1,
column_labels.border.bottom.color = "#FFFFFF",
column_labels.vlines.width = 1.5,
column_labels.vlines.color = "#007BA7",
stub.font.weight = "normal",
stub.border.color = "#007BA7",
summary_row.background.color = "#e6edfc",
summary_row.border.color = "#007BA7",
grand_summary_row.background.color = "#e6edfc",
grand_summary_row.border.color = "#007BA7",
grand_summary_row.border.style = "normal",
grand_summary_row.border.width = 3,
heading.align = "left")
gt_obj_out
}
View(gas_df)
gas_df_test <- gas_df
gas_df_test$column_test <- gas_df_test$2025_low / gas_df_test$2005
gas_df_test <- gas_df_test %>% mutate(column_test = 2025_high/2005)
gas_df_test <- gas_df_test %>% mutate(column_test = (2035_high/2005))
gas_df_test <- gas_df_test %>% mutate(column_test = (`2035_high`/`2005`))
gas_df_test <- gas_df_test %>% mutate(column_test = `2035_high`/`2005`)
