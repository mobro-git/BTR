# Load packages required to define the pipeline:
library(targets)
library(tarchetypes)
source("packages.R")
# Run the R scripts in the R/ folder with your custom functions:
tar_source()
?map_dfr
path("data-raw", "model-runs")
data_folder <- path("data-raw", "model-runs")
source('packages.R')
data_folder <- path("data-raw", "model-runs")
data_folder <- paste0("data-raw", "model-runs")
data_folder <- paste0("data-raw/", "model-runs/")
dir_ls()
list.files(data_folder)
list.files(data_folder)
tar_make(data_folder)
tar_load(data_loaded)
tar_make(data_loaded)
tar_load(data_loaded)
tar_invalidate(data_loaded)
tar_destroy()
tar_make()
tar_make()
tar_make()
library(readxl)
tar_make()
targets::tar_meta(fields = error, complete_only = TRUE)
tar_make()
tar_make()
targets::tar_meta(fields = error, complete_only = TRUE)
tar_make()
targets::tar_meta(fields = error, complete_only = TRUE)
tar_make()
tar_make()
?tar_source()
# Load packages required to define the pipeline:
library(targets)
library(tarchetypes)
?tar_source()
?tar_plan
?tar_map
?dir_ls
?list.files
?write.csv
# Load packages required to define the pipeline:
library(targets)
library(tarchetypes)
tar_invalidate()
tar_outdated()
tar_invalidate(everything())
tar_make()
tar_outdated()
tar_make()
# Load packages required to define the pipeline:
library(targets)
library(tarchetypes)
source("packages.R")
# Load packages required to define the pipeline:
library(targets)
library(tarchetypes)
source("packages.R")
tar_make()
usproj_data <- read.csv('data-raw/usproj-data/usproj_emissions_2022_wide_for_btr_03_27_2024.csv')
View(usproj_data)
usproj_data <- read_csv('data-raw/usproj-data/usproj_emissions_2022_wide_for_btr_03_27_2024.csv')
View(usproj_data)
View(usproj_data)
#' read_data_file
#'
#' @param filepath
#'
#' @return
#' @export
read_raw_data_file <- function(filepath) {
filepath_ext <- fs::path_ext(filepath)
raw <- if(filepath_ext %in% c("xls", "xlsx")) {
if (length(readxl::excel_sheets(filepath) == 1)) {
readxl::read_xlsx(filepath)
}
else {
readxl::read_xlsx(filepath, sheet = "data", na = c("", "NA", "N/A"))
}
} else if (filepath_ext == "csv") {
readr::read_csv(file = filepath, na = c("", "NA", "N/A"), col_types = cols())
} else {
stop("Unable to read file type.")
}
column_renames <- c(
"model" = "Model",
"scenario" = "Scenario",
"region" = "Region",
"variable" = "Variable",
"unit" = "Unit",
"unit" = "Units",
"year" = "Year",
"value" = "Value",
"datasrc" = "file"
)
lowercase_names <- column_renames[column_renames %in% names(raw)]
raw_renamed = raw %>%
rename(!!! lowercase_names)
raw_data_cols <- c("model",
"scenario",
"region",
"variable",
"unit")
if(! all(raw_data_cols %in% names(raw_renamed))){
stop(paste0(setdiff(raw_data_cols, names(raw_renamed)),' column missing from ',fs::path_file(filepath),". "))
}
raw %>%
mutate(datasrc = fs::path_file(filepath))
}
usproj_data_files <- dir_ls('data-raw/usproj-data/')
csv <- read_raw_data_file(usproj_data_files[1])
read_usproj_data_file <- function(filepath, config) {
print(paste0("Reading ",filepath))
filepath_ext <- fs::path_ext(filepath)
raw <- if(filepath_ext %in% c("xls", "xlsx")) {
if (length(readxl::excel_sheets(filepath) == 1)) {
readxl::read_xlsx(filepath)
}
else {
readxl::read_xlsx(filepath, sheet = "data", na = c("", "NA", "N/A"))
}
} else if (filepath_ext == "csv") {
readr::read_csv(file = filepath, na = c("", "NA", "N/A"), col_types = cols())
} else {
stop("Unable to read file type.")
}
return(raw)
}
read_usproj_data_file <- function(filepath) {
print(paste0("Reading ",filepath))
filepath_ext <- fs::path_ext(filepath)
raw <- if(filepath_ext %in% c("xls", "xlsx")) {
if (length(readxl::excel_sheets(filepath) == 1)) {
readxl::read_xlsx(filepath)
}
else {
readxl::read_xlsx(filepath, sheet = "data", na = c("", "NA", "N/A"))
}
} else if (filepath_ext == "csv") {
readr::read_csv(file = filepath, na = c("", "NA", "N/A"), col_types = cols())
} else {
stop("Unable to read file type.")
}
return(raw)
}
read_usproj_data_file <- function(filepath, crosswalk) {
print(paste0("Reading ",filepath))
filepath_ext <- fs::path_ext(filepath)
raw <- if(filepath_ext %in% c("xls", "xlsx")) {
if (length(readxl::excel_sheets(filepath) == 1)) {
readxl::read_xlsx(filepath)
}
else {
readxl::read_xlsx(filepath, sheet = "data", na = c("", "NA", "N/A"))
}
} else if (filepath_ext == "csv") {
readr::read_csv(file = filepath, na = c("", "NA", "N/A"), col_types = cols())
} else {
stop("Unable to read file type.")
}
return(raw)
}
tar_make(usproj_data_loaded)
tar_make(usproj_data_loaded)
tar_make(usproj_data_loaded)
tar_make(usproj_data_loaded)
tar_load(usproj_data_loaded)
View(usproj_data_loaded)
tar_make(usproj_data_loaded)
tar_make()
tar_invalidate(everything())
tar_visnetwork(targets_only = TRUE)
tar_make(data_loaded)
tar_visnetwork(targets_only = TRUE)
tar_visnetwork(targets_only = TRUE)
tar_make(data_long)
tar_visnetwork(targets_only = TRUE)
tar_make()
tar_visnetwork(targets_only = TRUE)
tar_load(usproj_data_loaded)
rm(usproj_data_loaded)
tar_load(usproj_data_loaded)
View(usproj_data_loaded)
tar_make(usproj_data_loaded)
tar_load(usproj_data_loaded)
View(usproj_data_loaded)
unique(usproj_data_loaded$datasrc)
tar_load(data_long_clean)
View(data_long_clean)
tar_load(crosswalk_usproj_csv)
crosswalk <- read_csv(crosswalk_usproj_csv)
View(crosswalk)
tar_make(crosswalk_usproj_csv)
crosswalk <- read_csv(crosswalk_usproj_csv)
View(crosswalk)
View(usproj_data_loaded)
filepath <- usproj_data_files[1]
raw <-  read_file_ext(filepath) %>%
mutate(datasrc = fs::path_file(filepath)) %>%
select(datasrc, everything()) %>%
left_join(crosswalk, by='datasrc')
read_file_ext <- function(filepath) {
filepath_ext <- fs::path_ext(filepath)
raw <- if(filepath_ext %in% c("xls", "xlsx")) {
if (length(readxl::excel_sheets(filepath) == 1)) {
readxl::read_xlsx(filepath)
}
else {
readxl::read_xlsx(filepath, sheet = "data", na = c("", "NA", "N/A"))
}
} else if (filepath_ext == "csv") {
readr::read_csv(file = filepath, na = c("", "NA", "N/A"), col_types = cols())
} else {
stop("Unable to read file type.")
}
}
read_process_data_file <- function(filepath, config) {
print(paste0("Reading ",filepath))
read_raw_data_file(filepath) %>%
process_data_file(config)
}
raw <-  read_file_ext(filepath) %>%
mutate(datasrc = fs::path_file(filepath)) %>%
select(datasrc, everything()) %>%
left_join(crosswalk, by='datasrc')
View(raw)
raw <-  read_file_ext(filepath) %>%
mutate(datasrc = fs::path_file(filepath)) %>%
left_join(crosswalk, by='datasrc') %>%
select(datasrc, model, scenario, everything(),-notes)
unique(raw$scenario)
unique(raw$datasrc)
tar_make()
tar_make()
tar_load(usproj_data_loaded)
View(usproj_data_loaded)
unique(usproj_data_loaded$datasrc)
unique(usproj_data_loaded$scenario)
unique(usproj_data_loaded$model)
View(data_long_clean)
data_long <- usproj_data_loaded %>% {
# drop all-zero model-run-variable data
group_by(., model, scenario, variable) %>%
filter(!all(value == 0)) %>%
ungroup()} %>%
relocate_standard_col_order() %>%
arrange_standard() %>%
country_abbr() %>%
filter(!is.na(value))
data_long <- usproj_data_loaded %>% {
# drop all-zero model-run-variable data
group_by(., model, scenario, variable) %>%
filter(!all(value == 0)) %>%
ungroup()}
View(usproj_data)
tar_load(data_long)
View(data_long)
tar_load(data_loaded)
usproj_data_long <- usproj_data_loaded %>%
tidyr::pivot_longer(
cols = num_range(prefix = "", range = 2010:2100),
names_to = "year",
values_to = "value")%>%
mutate(year = as.numeric(year))
View(usproj_data_long)
View(usproj_data_long)
usproj_data_long <- usproj_data_loaded %>%
tidyr::pivot_longer(
cols = num_range(prefix = "", range = 1990:2100),
names_to = "year",
values_to = "value")%>%
mutate(year = as.numeric(year))
source("C:/Users/dlopez/Github/BTR/R/2d_make_data_long.R")
usproj_data_long <- usproj_data_loaded %>%
tidyr::pivot_longer(
cols = num_range(prefix = "", range = 1990:2100),
names_to = "year",
values_to = "value")%>%
mutate(year = as.numeric(year)) %>%
select(
model,
scenario,
usproj_category,
usproj_source,
usproj_subsource,
usproj_sector,
gas,
year,
value,
unit,
region,
datasrc
)
usproj_data_long <- usproj_data_loaded %>%
tidyr::pivot_longer(
cols = num_range(prefix = "", range = 1990:2100),
names_to = "year",
values_to = "value")%>%
mutate(year = as.numeric(year)) %>%
select(
model,
scenario,
usproj_category,
usproj_source,
usproj_subsource,
usproj_sector,
gas,
year,
value,
unit,
region,
datasrc
) %>%
replace(is.na(value),0)
usproj_data_long <- usproj_data_loaded %>%
tidyr::pivot_longer(
cols = num_range(prefix = "", range = 1990:2100),
names_to = "year",
values_to = "value")%>%
mutate(year = as.numeric(year)) %>%
select(
model,
scenario,
usproj_category,
usproj_source,
usproj_subsource,
usproj_sector,
gas,
year,
value,
unit,
region,
datasrc
) %>%
replace(is.na(.),0)
naniar::vis_miss(usproj_data_long)
usproj_data_long <- usproj_data_loaded %>%
tidyr::pivot_longer(
cols = num_range(prefix = "", range = 1990:2100),
names_to = "year",
values_to = "value")%>%
mutate(year = as.numeric(year)) %>%
select(
model,
scenario,
usproj_category,
usproj_source,
usproj_subsource,
usproj_sector,
gas,
year,
value,
unit,
region,
datasrc
)
naniar::vis_miss(usproj_data_long)
tar_make()
tar_load(usproj_data_long)
View(usproj_data_long)
print(unique(usproj_data_long$scenario))
print(unique(usproj_data_long$model))
print(unique(usproj_data_long$year))
